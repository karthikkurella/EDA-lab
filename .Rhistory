n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = loans, method = 'class')
rpart.plot(fit)
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train, method = 'class')
rpart.plot(fit)
?rpart()
names(loans)
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~ log.annual.inc+installment+int.rate+purpose+credit.policy, data = train, method = 'class')
rpart.plot(fit)
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~ log.annual.inc+installment+int.rate+purpose+credit.policy, data = train, method = 'class')
rpart.plot(fit)
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
summary(loans)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~ log.annual.inc+installment+int.rate+purpose+credit.policy, data = train, method = 'class')
rpart.plot(fit)
unique(loans$purpose)
loans=loans[,-c(11,12,13)]
str(loans)
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
loans=loans[,-c(11,12,13)]
str(loans)
summary(loans)
unique(loans$purpose)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~ log.annual.inc+installment+int.rate+purpose+credit.policy, data = train, method = 'class')
rpart.plot(fit)
unique(loans$cred)
unique(loans$credit.policy)
loans=loans[,-c(11,12,13)]
library(dplyr)
# Drop variables
loans <- loans % > %
select(-c(11, 12,13)) % > %
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) % > %
na.omit()
loans=loans[,-c(11,12,13)]
library(dplyr)
# Drop variables
loans <- loans % > %select(-c(11, 12,13)) % > %
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) % > %
na.omit()
loans=loans[,-c(11,12,13)]
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) % > %
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) % > %
na.omit()
loans=loans[,-c(11,12,13)]
library(dplyr)
# Drop variables
loans <- loans % > %select(-c(11, 12,13)) % > %
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) % > %
na.omit()
loans=loans[,-c(11,12,13)]
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
glimpse(clean_loans)
glimpse(loans)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~ log.annual.inc+installment+int.rate+purpose+credit.policy, data = train, method = 'class')
rpart.plot(fit)
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train, method = 'class')
rpart.plot(fit)
data_train <- create_train_test(loans, 0.8, train = TRUE)
data_train <- create_train_test(loans, 0.8, train = TRUE)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(loans, 0.8, train = TRUE)
data_train <- create_train_test(loans, 0.8, train = TRUE)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
data_train <- create_train_test(loans, 0.8, train = TRUE)
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
glimpse(loans)
str(loans)
summary(loans)
unique(loans$credit.policy)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
data_train <- create_train_test(loans, 0.8, train = TRUE)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
data_train <- create_train_test(loans, 0.8, train = TRUE)
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train <- Smarket[training.samples, ]
test <- Smarket[-training.samples, ]
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train, method = 'class')
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
glimpse(loans)
str(loans)
summary(loans)
unique(loans$credit.policy)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train <- Smarket[training.samples, ]
test <- Smarket[-training.samples, ]
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train, method = 'class')
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train1 <- loans[training.samples, ]
test1 <- loans[-training.samples, ]
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train, method = 'class')
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train1, method = 'class')
rpart.plot(fit)
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
glimpse(loans)
str(loans)
summary(loans)
unique(loans$credit.policy)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train1 <- loans[training.samples, ]
test1 <- loans[-training.samples, ]
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train1, method = 'class')
rpart.plot(fit)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
shuffle_index <- sample(1:nrow(loans))
#head(shuffle_index)
loans<-loans[shuffle_index,]
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
glimpse(loans)
str(loans)
summary(loans)
unique(loans$credit.policy)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
shuffle_index <- sample(1:nrow(loans))
#head(shuffle_index)
loans<-loans[shuffle_index,]
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train1 <- loans[training.samples, ]
test1 <- loans[-training.samples, ]
prop.table(table(loans$not.fully.paid))
library(rpart)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train1, method = 'class')
rpart.plot(fit)
head(train1)
loans_tree = ctree(not.fully.paid ~ .,training_set)
loans_tree = ctree(not.fully.paid ~ .,train)
loans_tree = ctree(not.fully.paid ~ .,train1)
loans_tree = ctree(not.fully.paid ~ .,train1)
loans_tree = ctree(not.fully.paid ~ .,train1)
# Drop variables
unique(loans$purpose)
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
loans$purpose<-as.factor(loans$purpose)
glimpse(loans)
str(loans)
summary(loans)
unique(loans$credit.policy)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
shuffle_index <- sample(1:nrow(loans))
#head(shuffle_index)
loans<-loans[shuffle_index,]
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train1 <- loans[training.samples, ]
test1 <- loans[-training.samples, ]
prop.table(table(loans$not.fully.paid))
loans_tree = ctree(not.fully.paid ~ .,train1)
library(rpart)
head(train1)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train1, method = 'class')
rpart.plot(fit)
loans_tree = ctree(not.fully.paid ~ .,train1)
plot(loans_tree, cex=0.4, cex.main = 2)
loans_tree = ctree(not.fully.paid ~ .,train1)
plot(loans_tree, type="simple")
tab = table(predict(loans),train$not.fully.paid)
tab = table(predict(loans),train$not.fully.paid)
tab = table(predict(loans_tree),test1$not.fully.paid)
tab = table(predict(loans_tree),train1$not.fully.paid)
tab
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(-c(11, 12,13)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
loans$purpose<-as.factor(loans$purpose)
glimpse(loans)
str(loans)
summary(loans)
unique(loans$credit.policy)
#loans$not.fully.paid=as.factor(loans$not.fully.paid)
set.seed(1234)
shuffle_index <- sample(1:nrow(loans))
#head(shuffle_index)
loans<-loans[shuffle_index,]
#split the data into training set and test set
create_train_test <- function(loans, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < 1: total_row
if (train == TRUE) {
return (loans[train_sample, ])
} else {
return (loans[-train_sample, ])
}
}
training.samples <- loans$not.fully.paid %>% createDataPartition(p = 0.8, list = FALSE)
train1 <- loans[training.samples, ]
test1 <- loans[-training.samples, ]
prop.table(table(loans$not.fully.paid))
loans_tree = ctree(not.fully.paid ~ .,train1)
plot(loans_tree, type="simple")
tab = table(predict(loans_tree),train1$not.fully.paid)
tab
library(rpart)
head(train1)
library(rpart.plot)
fit <- rpart(not.fully.paid~., data = train1, method = 'class')
rpart.plot(fit)
library(dplyr)
# Drop variables
loans <- loans %>%select(c(3,4,5,6,7,8,9,10)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
library(ISLR)
library(corrplot)
library(dplyr)
library(caret)
library(tidyverse)
list.files(path="..")
loans = read.csv('loan_data.csv',header = TRUE)
names(loans)
glimpse(loans)
library(dplyr)
# Drop variables
loans <- loans %>%select(c(3,4,5,6,7,8,9,10)) %>%
#Convert to factor level
mutate(not.fully.paid = factor(not.fully.paid, levels = c(0, 1), labels = c('No', 'Yes'))) %>%na.omit()
